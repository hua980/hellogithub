一.求中位数（奇数就是中间那个数，偶数就是中间两个数的平均）
select job,
    floor((count(*)+1)/2) as "start",
    (floor((count(*)+2)/2)) as "end"
from grade
GROUP by job
order by job

二.时间比较，如果是date类型，直接比较
select * from order_info
where date > '2025-10-15'
and product_name in ('C++','Java','Python')
and status='completed'
order by id

三.截取日期中的年份
select job,sum(num) as cnt from resume_info
where year(date)='2025'
group by job
order by cnt desc

四.中位数
当某一数的正序和逆序累计均大于整个序列的数字个数的一半即为中位数
select grade
from
    (select grade,
    (select sum(number) from class_grade) as total,
    sum(number)over(order by grade) a, -- 求正序
    sum(number)over(order by grade desc) b  -- 求逆序
     from class_grade
    order by grade)t
where a >= total/2 and b >= total/2  -- 正序逆序均大于整个数列数字个数的一半
order by grade;

五.求第几高，前几名
第二高的薪水（注意limit的使用）
    select distinct salary as SecondHighestSalary from Employee order by salary desc limit 1,1 
    # IFNULL() 函数用于判断第一个表达式是否为 NULL,如果为 NULL 则返回第二个参数的值,如果不为 NULL 则返回第一个参数的值
    select ifnull((
          select distinct Salary from Employee
          order by Salary desc limit N,1),null) as getNthHighestSalary
          
六、求连续出现3次的数字（MYSQL lag() 和lead()函数使用: https://blog.csdn.net/WHYbeHERE/article/details/109531867）
该题使用LAG()和LEAD()的结果一样
    SELECT DISTINCT Num as ConsecutiveNums
    FROM(
        SELECT Id,Num,
        Lead(Num,1)OVER() as num_1, #选择指定行的向前一行的内容
        Lead(Num,2)OVER() as num_2  #选择指定行的向前两行的内容
        FROM Logs
    ) as c
    WHERE c.Num = c.num_1 AND c.num_1 = c.num_2 #这三个数都要相等。

    select distinct Num as ConsecutiveNums
    from(
        select Num,
        lag(Num,1) over(order by Id desc) as last1,
        lag(Num,2) over(order by Id desc) as last2
        from Logs
    ) as t
    where Num = last1 and last1= last2

或者用三表连接（自连接）
    select distinct a.Num as ConsecutiveNums
    from Logs as a,Logs as b,Logs as c
    where a.Num=b.Num and b.Num=c.Num and a.id=b.id-1 and b.id=c.id-1;



