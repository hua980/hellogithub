

Apriori算法思想：
    1）找出所有的频集，这些项集出现的频繁性至少和预定义的最小支持度一样。

    2）由频集产生强关联规则，这些规则必须满足最小支持度和最小可信度。

    3）使用第1）步找到的频集产生期望的规则，产生只包含集合的项的所有规则，其中每一条规则的右部只有一项，这里采用的是中规则的定义。

    4）一旦这些规则被生成，那么只有那些大于用户给定的最小可信度的规则才被留下来。为了生成所有频集，使用了递归的方法。
    
    
支持度:频繁项集在全体数据样本中所占的比例
support(X, Y) = P(X, Y) = \frac{number(X, Y)}{number(all\ sample)}support(X,Y)=P(X,Y)=number(all sample)number(X,Y)​
置信度：体现为一个数据出现后，另一个数据出现的概率，或者说数据的条件概率
confidence(X \Rightarrow Y) = P(Y | X) = \frac{P(X,Y)}{P(X)} =\frac{number(X,Y)}{number(X)}confidence(X⇒Y)=P(Y∣X)=P(X)P(X,Y)​=number(X)number(X,Y)


两条先验原理：
  Apriori定律1：如果一个集合是频繁项集，则它的所有子集都是频繁项集。
  Apriori定律2：如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。
  
  
寻找关联规则的思想是：从一个频繁项集开始，创建一个规则列表，首先将规则的右边限定为一个元素，对这些规则进行测试，
                    接下来合并剩下的规则来创建一个新的规则列表，规则的右边限定为两个元素，就这样一步一步实现。
