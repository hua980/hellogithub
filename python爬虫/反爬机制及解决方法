 
破解反爬虫机制的几种方法
1. 什么是爬虫和反爬虫？
爬虫：使用任何技术手段，批量获取网站信息的一种方式。
反爬虫：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。



2. 常见的反爬虫机制
（1）通过UA 识别爬虫 
有些爬虫的UA是特殊的，与正常浏览器的不一样，可通过识别特征UA，直接封掉爬虫请求

（2）设置IP访问频率
如果超过一定频率，弹出验证码 如果输入正确的验证码，则放行，如果没有输入，则拉入禁止一段时间，
如果超过禁爬时间，再次出发验证码，则拉入黑名单。当然根据具体的业务，为不同场景设置不同阈值，比如登陆用户和非登陆用户，请求是否含有refer。

（3）通过并发识别爬虫 
有些爬虫的并发是很高的，统计并发最高的IP，加入黑名单（或者直接封掉爬虫IP所在C段）

（4）请求的时间窗口过滤统计 
爬虫爬取网页的频率都是比较固定的，不像人去访问网页，中间的间隔时间比较无规则，
所以我们可以给每个IP地址建立一个时间窗口，记录IP地址最近12次访问时间，每记录一次就滑动一次窗口，比较最近访问时间和当前时间，
如果间隔时间很长判断不是爬虫，清除时间窗口，如果间隔不长，就回溯计算指定时间段的访问频率，如果访问频率超过阀值，就转向验证码页面让用户填写验证码

（5）限制单个ip/api token的访问量 
比如15分钟限制访问页面180次，具体标准可参考一些大型网站的公开api，如twitter api，对于抓取用户公开信息的爬虫要格外敏感

（6）识别出合法爬虫 
对http头agent进行验证，是否标记为、百度的spider，严格一点的话应该判别来源IP是否为、baidu的爬虫IP，这些IP在网上都可以找到。校验出来IP不在白名单就可以阻止访问内容。

（7）蜜罐资源 
爬虫解析离不开正则匹配，适当在页面添加一些正常浏览器浏览访问不到的资源，一旦有ip访问，过滤下头部是不是搜素引擎的蜘蛛，不是就可以直接封了。比如说隐式链接。



3. 破解反爬虫机制的几种方法
策略1：设置下载延迟，比如数字设置为5秒，越大越安全
--可以通过settings.py中的DOWNLOAD_DELAY
--DOWNLOAD_DELAY = 3

策略2：禁止Cookie，某些网站会通过Cookie识别用户身份，禁用后使得服务器无法识别爬虫轨迹
--可以通过settings.py中的COOKIES_ENABLED , 控制 CookiesMiddleware 开启或关闭
--COOKIES_ENABLED = False

策略3：使用user agent池。也就是每次发送的时候随机从池中选择不一样的浏览器头信息，防止暴露爬虫身份

策略4：使用IP池，这个需要大量的IP资源，可以通过抓取网上免费公开的IP建成自有的IP代理池。

策略5：分布式爬取，这个是针对大型爬虫系统的，实现一个分布式的爬虫，主要为以下几个步骤： 
1、基本的http抓取工具，如scrapy； 
2、避免重复抓取网页，如Bloom Filter； 
3、维护一个所有集群机器能够有效分享的分布式队列； 
4、将分布式队列和Scrapy的结合； 
5、后续处理，网页析取(如python-goose)，存储(如Mongodb)。

策略6：模拟登录—浏览器登录的爬取 
设置一个cookie处理对象，它负责将cookie添加到http请求中，并能从http响应中得到cookie，
向网站登录页面发送一个请求Request, 包括登录url，POST请求的数据，Http header利用urllib2.urlopen发送请求，接收WEB服务器的Response。

详解cookie反反爬策略  参考：https://blog.csdn.net/qq_39915318/article/details/105881809?

反爬机制 cookie(手动获取，自动获取)
首先先大概了解一下cookie的作用：cookie一般是登录后产生(post)，用来保持登录状态的，
一般登录一次，下一次访问该网站下的其他网址时就不需要登录了，这就是由于cookie的作用，
cookie就是给无状态的HTTP/HTTPS协议添加了一种保持之前状态的功能，这样下次处理信息的时候就不用重新获取信息了

cookie还可以来判断是否是爬虫程序，因为一般的爬虫程序中并不会携带cookie，
有些比较严格的网站，不登录也需要携带cookie访问，也就是说cookie的应用场景并不仅仅只有登录后才需要

自动获取
方式一：基于Session对象实现自动处理(捕获登录前的cookie)
如何获取一个session对象？：
requests.Session()
session对象的作用：该对象可以向requests一样调用get和post发起指定请求，只不过如果在使用session发起请求的过程中如果产生了cookie，
则cookie会被自动存储到该session对象中，那么就意味着下次再使用session对象发起请求，则该次请求就是携带了cookie进行的请求发送

第一次使用sessino是为了将cookie捕获且存储到session对象中，第二次使用session就是发送携带了cookie的请求
代码：

import requests
from lxml import etree

headers = {
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36 Edg/81.0.416.50'
}

# 用了自动获取的cookie每次请求都是新的cookie就非常灵活了

session = requests.Session() # 创建好了seion对象
# 第一次使用session捕获且存储cookie,猜测对雪球网首页发起的请求可能会产生cookie
main_url = 'https://xuequi.com/'
session.get(main_url,headers=headers) # 捕获且存储cookie

# 含有ajax数据包的url
url = 'https://xueqiu.com/v4/statuses/public_timeline_by_category.json?since_id=-1&max_id=20370786&count=15&category=-1'
page_text = session.get(url=url,headers=headers).json() # 携带捕获的cookie发送请求
print(page_text)

cookie并不一定都是主页会产生，应该多次使用session在不同的地址下捕获cookie
方式二：基于selenium去实现获取登录后产生的cookie
这里以免密登录QQ空间为例

代码：
from time import sleep
from selenium import webdriver
import requests
# 自动登录
driver = webdriver.Chrome(executable_path='chromedriver.exe')
driver.get('https://qzone.qq.com/')
# driver.set_window_position(20, 40)
# driver.set_window_size(1100,700)
# 表单在该框架下
driver.switch_to.frame('login_frame')
sleep(0.5)
driver.find_element_by_xpath('//*[@id="bottom_qlogin"]/a[1]').click()
driver.find_element_by_xpath('//*[@id="u"]').send_keys('XXXX') # 你的QQ号
driver.find_element_by_xpath('//*[@id="p"]').send_keys('XXXXX')# 你的QQ密码
driver.find_element_by_xpath('//*[@id="login_button"]').click()
'''！！！！如果输入账号密码后 弹出滑动验证码则可以这样执行
方式一：input('手动验证后输入空格继续：)
方式二： 将滑块图片保存下来 交给云打码平台，算出 X Y距离后 使用selenium动作链模拟人为验证进行登录
关于验证码识别，下一期在详解
！！！'''
# 获取cookie
cookies = driver.get_cookies()
cookies_list = []
for i in cookies:
    cookies_list.append(' '+i['name']+ '='+ i['value']) # 取出键值对，键值对前面都有一个空格，除了第一个键值对前面没有空格

cookiestr = ';'.join(cookies_list)

headers ={
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36',
    'Cookie':cookiestr[1:] # 开头的键值对并不需要前面的空格，如果有则会报错  可以将cookie保存到本地方便下次使用，注意有效时长问题

}

url = 'https://user.qzone.qq.com/1515768305' # 你的QQ号
response = requests.get(url,headers=headers).content.decode('utf-8')   #发送携带了cookie的请求
# 成功输出登录后页面
print(response)

# 一定要注意cookie字符串的格式，第一个键值对前面没有空格，后面的每一个都有空格，要不cookie是无效的





